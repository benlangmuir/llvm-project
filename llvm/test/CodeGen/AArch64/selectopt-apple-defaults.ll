; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=arm64-apple-macosx -O3 -early-ifcvt-limit=0 -select-opti-loop-cycle-gain-threshold=2 -select-opti-loop-gradient-gain-threshold=10 -mcpu=apple-a7 -o - %s | FileCheck %s
; RUN: llc -mtriple=arm64-apple-macosx -O3 -early-ifcvt-limit=0 -select-opti-loop-cycle-gain-threshold=2 -select-opti-loop-gradient-gain-threshold=10 -mcpu=apple-m1 -o - %s | FileCheck %s
; RUN: llc -mtriple=arm64-apple-macosx -O3 -early-ifcvt-limit=0 -select-opti-loop-cycle-gain-threshold=2 -select-opti-loop-gradient-gain-threshold=10 -mcpu=apple-m2 -o - %s | FileCheck %s
; RUN: llc -mtriple=arm64-apple-macosx -O3 -early-ifcvt-limit=0 -select-opti-loop-cycle-gain-threshold=2 -select-opti-loop-gradient-gain-threshold=10 -mcpu=apple-m3 -o - %s | FileCheck %s
; RUN: llc -mtriple=arm64-apple-macosx -O3 -early-ifcvt-limit=0 -select-opti-loop-cycle-gain-threshold=2 -select-opti-loop-gradient-gain-threshold=10 -mcpu=apple-m4 -o - %s | FileCheck %s

define void @test_select_opt(ptr %dst, ptr %src, i64 %j.start, i64 %p, i64 %i.start) {
; CHECK-LABEL: test_select_opt:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    add x8, x2, #1
; CHECK-NEXT:  LBB0_1: ; %loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldr x9, [x1, x4, lsl #3]
; CHECK-NEXT:    ldr x10, [x1, x2, lsl #3]
; CHECK-NEXT:    cmp x9, x10
; CHECK-NEXT:    cset w9, lo
; CHECK-NEXT:    cinc x2, x2, lo
; CHECK-NEXT:    sub x9, x4, x9
; CHECK-NEXT:    str x2, [x0, x9, lsl #3]
; CHECK-NEXT:    mov x4, x2
; CHECK-NEXT:    subs x8, x8, #1
; CHECK-NEXT:    b.ne LBB0_1
; CHECK-NEXT:  ; %bb.2: ; %exit
; CHECK-NEXT:    ret
entry:
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %j = phi i64 [ %j.start, %entry ], [ %j.next, %loop ]
  %i = phi i64 [ %i.start, %entry ], [ %j.next, %loop ]
  %gep.i = getelementptr inbounds ptr, ptr %src, i64 %i
  %l.i = load ptr, ptr %gep.i, align 8
  %gep.j = getelementptr inbounds ptr, ptr %src, i64 %j
  %l.j = load ptr, ptr %gep.j, align 8
  %cmp3 = icmp ult ptr %l.i, %l.j
  %dec = zext i1 %cmp3 to i64
  %dec.i = sext i1 %cmp3 to i64
  %j.next = add nsw i64 %j, %dec
  %i.next = add nsw i64 %i, %dec.i
  %gep.dst = getelementptr inbounds ptr, ptr %dst, i64 %i.next
  store i64 %j.next, ptr %gep.dst, align 8
  %iv.next = add i64 %iv, 1
  %ec = icmp eq i64 %iv, %j.start
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}
